// <auto-generated />
using System;
using DOTNET_DIARIES.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DOTNET_DIARIES.Migrations
{
    [DbContext(typeof(DOTNET_DIARIES_Context))]
    partial class DOTNET_DIARIES_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DOTNET_DIARIES.Models.Blogpost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Blogposts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "This is the content of the first blogpost.",
                            ImageUrl = "https://placecats.com/200/300",
                            PostedDate = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Blogpost about C#"
                        });
                });

            modelBuilder.Entity("DOTNET_DIARIES.Models.BlogpostTag", b =>
                {
                    b.Property<int>("BlogpostId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("BlogpostId", "TagId");

                    b.ToTable("BlogpostTags");

                    b.HasData(
                        new
                        {
                            BlogpostId = 1,
                            TagId = 1
                        },
                        new
                        {
                            BlogpostId = 1,
                            TagId = 2
                        });
                });

            modelBuilder.Entity("DOTNET_DIARIES.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ASP.NET"
                        });
                });

            modelBuilder.Entity("DOTNET_DIARIES.Models.BlogpostTag", b =>
                {
                    b.HasOne("DOTNET_DIARIES.Models.Blogpost", "Blogpost")
                        .WithMany("BlogpostTags")
                        .HasForeignKey("BlogpostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DOTNET_DIARIES.Models.Tag", "Tag")
                        .WithMany("BlogpostTags")
                        .HasForeignKey("BlogpostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blogpost");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DOTNET_DIARIES.Models.Blogpost", b =>
                {
                    b.Navigation("BlogpostTags");
                });

            modelBuilder.Entity("DOTNET_DIARIES.Models.Tag", b =>
                {
                    b.Navigation("BlogpostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
